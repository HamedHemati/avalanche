:mod:`avalanche.training.strategies.strategy_wrappers`
======================================================

.. py:module:: avalanche.training.strategies.strategy_wrappers


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   avalanche.training.strategies.strategy_wrappers.Naive
   avalanche.training.strategies.strategy_wrappers.CWRStar
   avalanche.training.strategies.strategy_wrappers.Replay
   avalanche.training.strategies.strategy_wrappers.GSS_greedy
   avalanche.training.strategies.strategy_wrappers.GDumb
   avalanche.training.strategies.strategy_wrappers.LwF
   avalanche.training.strategies.strategy_wrappers.AGEM
   avalanche.training.strategies.strategy_wrappers.GEM
   avalanche.training.strategies.strategy_wrappers.EWC
   avalanche.training.strategies.strategy_wrappers.SynapticIntelligence
   avalanche.training.strategies.strategy_wrappers.CoPE
   avalanche.training.strategies.strategy_wrappers.LFL



.. py:class:: Naive(model: Module, optimizer: Optimizer, criterion=CrossEntropyLoss(), train_mb_size: int = 1, train_epochs: int = 1, eval_mb_size: int = None, device=None, plugins: Optional[List[StrategyPlugin]] = None, evaluator: EvaluationPlugin = default_logger, eval_every=-1)

   Bases: :class:`avalanche.training.strategies.base_strategy.BaseStrategy`

   The simplest (and least effective) Continual Learning strategy. Naive just
   incrementally fine tunes a single model without employing any method
   to contrast the catastrophic forgetting of previous knowledge.
   This strategy does not use task identities.

   Naive is easy to set up and its results are commonly used to show the worst
   performing baseline.

   Creates an instance of the Naive strategy.

   :param model: The model.
   :param optimizer: The optimizer to use.
   :param criterion: The loss criterion to use.
   :param train_mb_size: The train minibatch size. Defaults to 1.
   :param train_epochs: The number of training epochs. Defaults to 1.
   :param eval_mb_size: The eval minibatch size. Defaults to 1.
   :param device: The device to use. Defaults to None (cpu).
   :param plugins: Plugins to be added. Defaults to None.
   :param evaluator: (optional) instance of EvaluationPlugin for logging
       and metric computations.
   :param eval_every: the frequency of the calls to `eval` inside the
       training loop.
           if -1: no evaluation during training.
           if  0: calls `eval` after the final epoch of each training
               experience.
           if >0: calls `eval` every `eval_every` epochs and at the end
               of all the epochs for a single experience.


.. py:class:: CWRStar(model: Module, optimizer: Optimizer, criterion, cwr_layer_name: str, train_mb_size: int = 1, train_epochs: int = 1, eval_mb_size: int = None, device=None, plugins: Optional[List[StrategyPlugin]] = None, evaluator: EvaluationPlugin = default_logger, eval_every=-1)

   Bases: :class:`avalanche.training.strategies.base_strategy.BaseStrategy`

   CWR* Strategy.
   This strategy does not use task identities.

   :param model: The model.
   :param optimizer: The optimizer to use.
   :param criterion: The loss criterion to use.
   :param cwr_layer_name: name of the CWR layer. Defaults to None, which
       means that the last fully connected layer will be used.
   :param train_mb_size: The train minibatch size. Defaults to 1.
   :param train_epochs: The number of training epochs. Defaults to 1.
   :param eval_mb_size: The eval minibatch size. Defaults to 1.
   :param device: The device to use. Defaults to None (cpu).
   :param plugins: Plugins to be added. Defaults to None.
   :param evaluator: (optional) instance of EvaluationPlugin for logging
       and metric computations.
   :param eval_every: the frequency of the calls to `eval` inside the
       training loop.
           if -1: no evaluation during training.
           if  0: calls `eval` after the final epoch of each training
               experience.
           if >0: calls `eval` every `eval_every` epochs and at the end
               of all the epochs for a single experience.


.. py:class:: Replay(model: Module, optimizer: Optimizer, criterion, mem_size: int = 200, train_mb_size: int = 1, train_epochs: int = 1, eval_mb_size: int = None, device=None, plugins: Optional[List[StrategyPlugin]] = None, evaluator: EvaluationPlugin = default_logger, eval_every=-1)

   Bases: :class:`avalanche.training.strategies.base_strategy.BaseStrategy`

   Experience replay strategy. See ReplayPlugin for more details.
   This strategy does not use task identities.

   :param model: The model.
   :param optimizer: The optimizer to use.
   :param criterion: The loss criterion to use.
   :param mem_size: replay buffer size.
   :param train_mb_size: The train minibatch size. Defaults to 1.
   :param train_epochs: The number of training epochs. Defaults to 1.
   :param eval_mb_size: The eval minibatch size. Defaults to 1.
   :param device: The device to use. Defaults to None (cpu).
   :param plugins: Plugins to be added. Defaults to None.
   :param evaluator: (optional) instance of EvaluationPlugin for logging
       and metric computations.
   :param eval_every: the frequency of the calls to `eval` inside the
       training loop.
           if -1: no evaluation during training.
           if  0: calls `eval` after the final epoch of each training
               experience.
           if >0: calls `eval` every `eval_every` epochs and at the end
               of all the epochs for a single experience.


.. py:class:: GSS_greedy(model: Module, optimizer: Optimizer, criterion, mem_size: int = 200, mem_strength=1, input_size=[], train_mb_size: int = 1, train_epochs: int = 1, eval_mb_size: int = None, device=None, plugins: Optional[List[StrategyPlugin]] = None, evaluator: EvaluationPlugin = default_logger, eval_every=-1)

   Bases: :class:`avalanche.training.strategies.base_strategy.BaseStrategy`

   Experience replay strategy. See ReplayPlugin for more details.
   This strategy does not use task identities.

   :param model: The model.
   :param optimizer: The optimizer to use.
   :param criterion: The loss criterion to use.
   :param mem_size: replay buffer size.
   :param n: memory random set size.
   :param train_mb_size: The train minibatch size. Defaults to 1.
   :param train_epochs: The number of training epochs. Defaults to 1.
   :param eval_mb_size: The eval minibatch size. Defaults to 1.
   :param device: The device to use. Defaults to None (cpu).
   :param plugins: Plugins to be added. Defaults to None.
   :param evaluator: (optional) instance of EvaluationPlugin for logging
       and metric computations.
   :param eval_every: the frequency of the calls to `eval` inside the
       training loop.
           if -1: no evaluation during training.
           if  0: calls `eval` after the final epoch of each training
               experience.
           if >0: calls `eval` every `eval_every` epochs and at the end
               of all the epochs for a single experience.


.. py:class:: GDumb(model: Module, optimizer: Optimizer, criterion, mem_size: int = 200, train_mb_size: int = 1, train_epochs: int = 1, eval_mb_size: int = None, device=None, plugins: Optional[List[StrategyPlugin]] = None, evaluator: EvaluationPlugin = default_logger, eval_every=-1)

   Bases: :class:`avalanche.training.strategies.base_strategy.BaseStrategy`

   GDumb strategy. See GDumbPlugin for more details.
   This strategy does not use task identities.

   :param model: The model.
   :param optimizer: The optimizer to use.
   :param criterion: The loss criterion to use.
   :param mem_size: replay buffer size.
   :param train_mb_size: The train minibatch size. Defaults to 1.
   :param train_epochs: The number of training epochs. Defaults to 1.
   :param eval_mb_size: The eval minibatch size. Defaults to 1.
   :param device: The device to use. Defaults to None (cpu).
   :param plugins: Plugins to be added. Defaults to None.
   :param evaluator: (optional) instance of EvaluationPlugin for logging
       and metric computations.
   :param eval_every: the frequency of the calls to `eval` inside the
       training loop.
           if -1: no evaluation during training.
           if  0: calls `eval` after the final epoch of each training
               experience.
           if >0: calls `eval` every `eval_every` epochs and at the end
               of all the epochs for a single experience.


.. py:class:: LwF(model: Module, optimizer: Optimizer, criterion, alpha: Union[float, Sequence[float]], temperature: float, train_mb_size: int = 1, train_epochs: int = 1, eval_mb_size: int = None, device=None, plugins: Optional[List[StrategyPlugin]] = None, evaluator: EvaluationPlugin = default_logger, eval_every=-1)

   Bases: :class:`avalanche.training.strategies.base_strategy.BaseStrategy`

   Learning without Forgetting strategy.
       See LwF plugin for details.
       This strategy does not use task identities.

   :param model: The model.
   :param optimizer: The optimizer to use.
   :param criterion: The loss criterion to use.
   :param alpha: distillation hyperparameter. It can be either a float
           number or a list containing alpha for each experience.
   :param temperature: softmax temperature for distillation
   :param train_mb_size: The train minibatch size. Defaults to 1.
   :param train_epochs: The number of training epochs. Defaults to 1.
   :param eval_mb_size: The eval minibatch size. Defaults to 1.
   :param device: The device to use. Defaults to None (cpu).
   :param plugins: Plugins to be added. Defaults to None.
   :param evaluator: (optional) instance of EvaluationPlugin for logging
       and metric computations.
   :param eval_every: the frequency of the calls to `eval` inside the
       training loop.
           if -1: no evaluation during training.
           if  0: calls `eval` after the final epoch of each training
               experience.
           if >0: calls `eval` every `eval_every` epochs and at the end
               of all the epochs for a single experience.


.. py:class:: AGEM(model: Module, optimizer: Optimizer, criterion, patterns_per_exp: int, sample_size: int = 64, train_mb_size: int = 1, train_epochs: int = 1, eval_mb_size: int = None, device=None, plugins: Optional[List[StrategyPlugin]] = None, evaluator: EvaluationPlugin = default_logger, eval_every=-1)

   Bases: :class:`avalanche.training.strategies.base_strategy.BaseStrategy`

   Average Gradient Episodic Memory (A-GEM) strategy.
       See AGEM plugin for details.
       This strategy does not use task identities.

   :param model: The model.
   :param optimizer: The optimizer to use.
   :param criterion: The loss criterion to use.
   :param patterns_per_exp: number of patterns per experience in the memory
   :param sample_size: number of patterns in memory sample when computing
       reference gradient.
   :param train_mb_size: The train minibatch size. Defaults to 1.
   :param train_epochs: The number of training epochs. Defaults to 1.
   :param eval_mb_size: The eval minibatch size. Defaults to 1.
   :param device: The device to use. Defaults to None (cpu).
   :param plugins: Plugins to be added. Defaults to None.
   :param evaluator: (optional) instance of EvaluationPlugin for logging
       and metric computations.
   :param eval_every: the frequency of the calls to `eval` inside the
       training loop.
           if -1: no evaluation during training.
           if  0: calls `eval` after the final epoch of each training
               experience.
           if >0: calls `eval` every `eval_every` epochs and at the end
               of all the epochs for a single experience.


.. py:class:: GEM(model: Module, optimizer: Optimizer, criterion, patterns_per_exp: int, memory_strength: float = 0.5, train_mb_size: int = 1, train_epochs: int = 1, eval_mb_size: int = None, device=None, plugins: Optional[List[StrategyPlugin]] = None, evaluator: EvaluationPlugin = default_logger, eval_every=-1)

   Bases: :class:`avalanche.training.strategies.base_strategy.BaseStrategy`

   Gradient Episodic Memory (GEM) strategy.
       See GEM plugin for details.
       This strategy does not use task identities.

   :param model: The model.
   :param optimizer: The optimizer to use.
   :param criterion: The loss criterion to use.
   :param patterns_per_exp: number of patterns per experience in the memory
   :param memory_strength: offset to add to the projection direction
       in order to favour backward transfer (gamma in original paper).
   :param train_mb_size: The train minibatch size. Defaults to 1.
   :param train_epochs: The number of training epochs. Defaults to 1.
   :param eval_mb_size: The eval minibatch size. Defaults to 1.
   :param device: The device to use. Defaults to None (cpu).
   :param plugins: Plugins to be added. Defaults to None.
   :param evaluator: (optional) instance of EvaluationPlugin for logging
       and metric computations.
   :param eval_every: the frequency of the calls to `eval` inside the
       training loop.
           if -1: no evaluation during training.
           if  0: calls `eval` after the final epoch of each training
               experience.
           if >0: calls `eval` every `eval_every` epochs and at the end
               of all the epochs for a single experience.


.. py:class:: EWC(model: Module, optimizer: Optimizer, criterion, ewc_lambda: float, mode: str = 'separate', decay_factor: Optional[float] = None, keep_importance_data: bool = False, train_mb_size: int = 1, train_epochs: int = 1, eval_mb_size: int = None, device=None, plugins: Optional[List[StrategyPlugin]] = None, evaluator: EvaluationPlugin = default_logger, eval_every=-1)

   Bases: :class:`avalanche.training.strategies.base_strategy.BaseStrategy`

   Elastic Weight Consolidation (EWC) strategy.
       See EWC plugin for details.
       This strategy does not use task identities.

   :param model: The model.
   :param optimizer: The optimizer to use.
   :param criterion: The loss criterion to use.
   :param ewc_lambda: hyperparameter to weigh the penalty inside the total
          loss. The larger the lambda, the larger the regularization.
   :param mode: `separate` to keep a separate penalty for each previous
          experience. `onlinesum` to keep a single penalty summed over all
          previous tasks. `onlineweightedsum` to keep a single penalty
          summed with a decay factor over all previous tasks.
   :param decay_factor: used only if mode is `onlineweightedsum`.
          It specify the decay term of the importance matrix.
   :param keep_importance_data: if True, keep in memory both parameter
           values and importances for all previous task, for all modes.
           If False, keep only last parameter values and importances.
           If mode is `separate`, the value of `keep_importance_data` is
           set to be True.
   :param train_mb_size: The train minibatch size. Defaults to 1.
   :param train_epochs: The number of training epochs. Defaults to 1.
   :param eval_mb_size: The eval minibatch size. Defaults to 1.
   :param device: The device to use. Defaults to None (cpu).
   :param plugins: Plugins to be added. Defaults to None.
   :param evaluator: (optional) instance of EvaluationPlugin for logging
       and metric computations.
   :param eval_every: the frequency of the calls to `eval` inside the
       training loop.
           if -1: no evaluation during training.
           if  0: calls `eval` after the final epoch of each training
               experience.
           if >0: calls `eval` every `eval_every` epochs and at the end
               of all the epochs for a single experience.


.. py:class:: SynapticIntelligence(model: Module, optimizer: Optimizer, criterion, si_lambda: float, eps: float = 1e-07, train_mb_size: int = 1, train_epochs: int = 1, eval_mb_size: int = 1, device='cpu', plugins: Optional[Sequence['StrategyPlugin']] = None, evaluator=default_logger, eval_every=-1)

   Bases: :class:`avalanche.training.strategies.base_strategy.BaseStrategy`

   The Synaptic Intelligence strategy.

   This is the Synaptic Intelligence PyTorch implementation of the
   algorithm described in the paper
   "Continuous Learning in Single-Incremental-Task Scenarios"
   (https://arxiv.org/abs/1806.08568)

   The original implementation has been proposed in the paper
   "Continual Learning Through Synaptic Intelligence"
   (https://arxiv.org/abs/1703.04200).

   The Synaptic Intelligence regularization can also be used in a different
   strategy by applying the :class:`SynapticIntelligencePlugin` plugin.

   Creates an instance of the Synaptic Intelligence strategy.

   :param model: PyTorch model.
   :param optimizer: PyTorch optimizer.
   :param criterion: loss function.
   :param si_lambda: Synaptic Intelligence lambda term.
   :param eps: Synaptic Intelligence damping parameter.
   :param train_mb_size: mini-batch size for training.
   :param train_epochs: number of training epochs.
   :param eval_mb_size: mini-batch size for eval.
   :param device: PyTorch device to run the model.
   :param plugins: (optional) list of StrategyPlugins.
   :param evaluator: (optional) instance of EvaluationPlugin for logging
       and metric computations.
   :param eval_every: the frequency of the calls to `eval` inside the
       training loop.
           if -1: no evaluation during training.
           if  0: calls `eval` after the final epoch of each training
               experience.
           if >0: calls `eval` every `eval_every` epochs and at the end
               of all the epochs for a single experience.


.. py:class:: CoPE(model: Module, optimizer: Optimizer, criterion, mem_size: int = 200, n_classes: int = 10, p_size: int = 100, alpha: float = 0.99, T: float = 0.1, train_mb_size: int = 1, train_epochs: int = 1, eval_mb_size: int = None, device=None, plugins: Optional[List[StrategyPlugin]] = None, evaluator: EvaluationPlugin = default_logger, eval_every=-1)

   Bases: :class:`avalanche.training.strategies.base_strategy.BaseStrategy`

   Continual Prototype Evolution strategy.
   See CoPEPlugin for more details.
   This strategy does not use task identities during training.

   :param model: The model.
   :param optimizer: The optimizer to use.
   :param criterion: Loss criterion to use. Standard overwritten by
   PPPloss (see CoPEPlugin).
   :param mem_size: replay buffer size.
   :param n_classes: total number of classes that will be encountered. This
   is used to output predictions for all classes, with zero probability
   for unseen classes.
   :param p_size: The prototype size, which equals the feature size of the
   last layer.
   :param alpha: The momentum for the exponentially moving average of the
   prototypes.
   :param T: The softmax temperature, used as a concentration parameter.
   :param train_mb_size: The train minibatch size. Defaults to 1.
   :param train_epochs: The number of training epochs. Defaults to 1.
   :param eval_mb_size: The eval minibatch size. Defaults to 1.
   :param device: The device to use. Defaults to None (cpu).
   :param plugins: Plugins to be added. Defaults to None.
   :param evaluator: (optional) instance of EvaluationPlugin for logging
       and metric computations.
   :param eval_every: the frequency of the calls to `eval` inside the
       training loop.
           if -1: no evaluation during training.
           if  0: calls `eval` after the final epoch of each training
               experience.
           if >0: calls `eval` every `eval_every` epochs and at the end
               of all the epochs for a single experience.


.. py:class:: LFL(model: Module, optimizer: Optimizer, criterion, lambda_e: Union[float, Sequence[float]], train_mb_size: int = 1, train_epochs: int = 1, eval_mb_size: int = None, device=None, plugins: Optional[List[StrategyPlugin]] = None, evaluator: EvaluationPlugin = default_logger, eval_every=-1)

   Bases: :class:`avalanche.training.strategies.base_strategy.BaseStrategy`

   Less Forgetful Learning strategy.
       See LFL plugin for details.
       Refer Paper: https://arxiv.org/pdf/1607.00122.pdf
       This strategy does not use task identities.

   :param model: The model.
   :param optimizer: The optimizer to use.
   :param criterion: The loss criterion to use.
   :param lambda_e: euclidean loss hyper parameter. It can be either a
           float number or a list containing lambda_e for each experience.
   :param train_mb_size: The train minibatch size. Defaults to 1.
   :param train_epochs: The number of training epochs. Defaults to 1.
   :param eval_mb_size: The eval minibatch size. Defaults to 1.
   :param device: The device to use. Defaults to None (cpu).
   :param plugins: Plugins to be added. Defaults to None.
   :param evaluator: (optional) instance of EvaluationPlugin for logging
       and metric computations.
   :param eval_every: the frequency of the calls to `eval` inside the
       training loop.
           if -1: no evaluation during training.
           if  0: calls `eval` after the final epoch of each training
               experience.
           if >0: calls `eval` every `eval_every` epochs and at the end
               of all the epochs for a single experience.


